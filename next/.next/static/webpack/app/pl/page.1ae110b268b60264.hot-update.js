"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/pl/page",{

/***/ "(app-pages-browser)/./src/lib/statements/parser.ts":
/*!**************************************!*\
  !*** ./src/lib/statements/parser.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   categorizeTransaction: function() { return /* binding */ categorizeTransaction; },\n/* harmony export */   detectProvider: function() { return /* binding */ detectProvider; },\n/* harmony export */   parseAmount: function() { return /* binding */ parseAmount; },\n/* harmony export */   parseBNPRow: function() { return /* binding */ parseBNPRow; },\n/* harmony export */   parseBoursoramaRow: function() { return /* binding */ parseBoursoramaRow; },\n/* harmony export */   parseCSV: function() { return /* binding */ parseCSV; },\n/* harmony export */   parseCSVWithDelimiter: function() { return /* binding */ parseCSVWithDelimiter; },\n/* harmony export */   parseDate: function() { return /* binding */ parseDate; },\n/* harmony export */   parseFiles: function() { return /* binding */ parseFiles; },\n/* harmony export */   parseRevolutRow: function() { return /* binding */ parseRevolutRow; }\n/* harmony export */ });\n// CSV parsing with delimiter detection and BOM handling\nfunction parseCSVWithDelimiter(text, delimiter) {\n    const rows = [];\n    let cur = \"\";\n    let row = [];\n    let inQuotes = false;\n    for(let i = 0; i < text.length; i++){\n        const c = text[i];\n        const next = text[i + 1];\n        if (inQuotes) {\n            if (c === '\"' && next === '\"') {\n                cur += '\"';\n                i++;\n            } else if (c === '\"') {\n                inQuotes = false;\n            } else {\n                cur += c;\n            }\n        } else {\n            if (c === '\"') {\n                inQuotes = true;\n            } else if (c === delimiter) {\n                row.push(cur);\n                cur = \"\";\n            } else if (c === \"\\n\") {\n                row.push(cur);\n                rows.push(row);\n                row = [];\n                cur = \"\";\n            } else if (c === \"\\r\") {\n            // ignore\n            } else {\n                cur += c;\n            }\n        }\n    }\n    if (cur.length > 0 || row.length > 0) {\n        row.push(cur);\n        rows.push(row);\n    }\n    // Clean BOM and trim cells\n    if (rows.length && rows[0].length) {\n        rows[0][0] = rows[0][0].replace(/^\\ufeff/, \"\");\n    }\n    for(let r = 0; r < rows.length; r++){\n        rows[r] = rows[r].map((v)=>v == null ? \"\" : String(v).trim());\n    }\n    return rows;\n}\nfunction parseCSV(text) {\n    const candidates = [\n        \",\",\n        \";\",\n        \"\t\"\n    ];\n    let best = null;\n    let bestScore = -1;\n    for (const d of candidates){\n        const rows = parseCSVWithDelimiter(text, d);\n        let count = 0, cols = 0;\n        for (const r of rows){\n            const nonEmpty = r.filter((x)=>x && x.trim() !== \"\").length;\n            if (nonEmpty > 1) {\n                cols += r.length;\n                count++;\n            }\n            if (count >= 5) break;\n        }\n        const score = count ? cols / count : 0;\n        if (score > bestScore) {\n            bestScore = score;\n            best = rows;\n        }\n    }\n    return best || [\n        []\n    ];\n}\nfunction detectProvider(rows) {\n    for(let i = 0; i < Math.min(5, rows.length); i++){\n        const headerStr = rows[i].join(\" \").toLowerCase();\n        if (headerStr.includes(\"dateop\") || headerStr.includes(\"dateval\") || headerStr.includes(\"categoryparent\") || headerStr.includes(\"accountlabel\")) {\n            return {\n                provider: \"boursorama\",\n                headerRow: i\n            };\n        }\n        if (headerStr.includes(\"date operation\") || headerStr.includes(\"categorie operation\") || headerStr.includes(\"libelle operation\") || headerStr.includes(\"montant operation\")) {\n            return {\n                provider: \"bnp\",\n                headerRow: i\n            };\n        }\n        if (headerStr.includes(\"started date\") || headerStr.includes(\"completed date\") || headerStr.includes(\"type\") && headerStr.includes(\"product\") && headerStr.includes(\"amount\")) {\n            return {\n                provider: \"revolut\",\n                headerRow: i\n            };\n        }\n    }\n    return {\n        provider: \"unknown\",\n        headerRow: 0\n    };\n}\nfunction parseDate(dateStr, provider) {\n    if (!dateStr) return null;\n    if (provider === \"boursorama\") {\n        const match = dateStr.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\n        if (match) return \"\".concat(match[1], \"-\").concat(match[2], \"-\").concat(match[3]);\n    } else if (provider === \"revolut\") {\n        const match = dateStr.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\n        if (match) return \"\".concat(match[1], \"-\").concat(match[2], \"-\").concat(match[3]);\n    } else if (provider === \"bnp\") {\n        const match = dateStr.match(/(\\d{2})-(\\d{2})-(\\d{4})/);\n        if (match) return \"\".concat(match[3], \"-\").concat(match[2], \"-\").concat(match[1]);\n    } else {\n        const match = dateStr.match(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/);\n        if (match) return \"\".concat(match[3], \"-\").concat(match[2], \"-\").concat(match[1]);\n    }\n    return null;\n}\nfunction parseAmount(v) {\n    if (typeof v === \"number\") return v;\n    if (v == null) return 0;\n    let s = String(v).trim();\n    if (!s) return 0;\n    s = s.replace(/\\s/g, \"\");\n    if (s.includes(\",\")) {\n        if (s.indexOf(\".\") < s.indexOf(\",\")) {\n            s = s.replace(/\\./g, \"\").replace(\",\", \".\");\n        } else {\n            s = s.replace(\",\", \".\");\n        }\n    }\n    s = s.replace(/[^\\d.-]/g, \"\");\n    const n = parseFloat(s);\n    return isNaN(n) ? 0 : n;\n}\nfunction categorizeTransaction(description, rulesText) {\n    const desc = (description || \"\").toLowerCase();\n    const categories = {\n        \"Transport\": [\n            \"sncf\",\n            \"ratp\",\n            \"uber\",\n            \"taxi\",\n            \"metro\",\n            \"bus\",\n            \"train\"\n        ],\n        \"E-commerce\": [\n            \"amazon\",\n            \"cdiscount\",\n            \"fnac\",\n            \"ebay\",\n            \"aliexpress\"\n        ],\n        \"Food & Restaurants\": [\n            \"carrefour\",\n            \"franprix\",\n            \"monoprix\",\n            \"auchan\",\n            \"restaurant\",\n            \"cafe\",\n            \"boulangerie\"\n        ],\n        \"Utilities\": [\n            \"edf\",\n            \"orange\",\n            \"sfr\",\n            \"free\",\n            \"bouygues\",\n            \"internet\",\n            \"mobile\"\n        ],\n        \"Health\": [\n            \"pharmacy\",\n            \"pharmacie\",\n            \"doctor\",\n            \"docteur\",\n            \"medical\",\n            \"hopital\"\n        ],\n        \"Accommodation\": [\n            \"airbnb\",\n            \"hotel\",\n            \"booking\",\n            \"loyer\",\n            \"rent\"\n        ],\n        \"Entertainment\": [\n            \"cinema\",\n            \"netflix\",\n            \"spotify\",\n            \"steam\",\n            \"playstation\",\n            \"xbox\"\n        ]\n    };\n    if (rulesText) {\n        const lines = rulesText.split(\"\\n\");\n        for (const line of lines){\n            const [keyword, category] = line.split(\"=\").map((s)=>{\n                var _s_trim;\n                return (_s_trim = s === null || s === void 0 ? void 0 : s.trim()) !== null && _s_trim !== void 0 ? _s_trim : \"\";\n            });\n            if (keyword && category && desc.includes(keyword.toLowerCase())) return category;\n        }\n    }\n    for (const [category, keywords] of Object.entries(categories)){\n        for (const keyword of keywords){\n            if (desc.includes(keyword)) return category;\n        }\n    }\n    return \"Other\";\n}\nfunction parseBoursoramaRow(row, headers, accountLabel, rulesText) {\n    const dateIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"dateop\"));\n    const descIdx = headers.findIndex((h)=>h.toLowerCase() === \"label\" || h.toLowerCase().includes(\"label\"));\n    const amountIdx = headers.findIndex((h)=>h.toLowerCase() === \"amount\");\n    const categoryIdx = headers.findIndex((h)=>h.toLowerCase() === \"categoryparent\" || h.toLowerCase().includes(\"categoryparent\"));\n    const accountIdx = headers.findIndex((h)=>h.toLowerCase() === \"accountlabel\" || h.toLowerCase().includes(\"accountlabel\"));\n    const balIdx = headers.findIndex((h)=>h.toLowerCase() === \"accountbalance\" || h.toLowerCase().includes(\"accountbalance\"));\n    if (dateIdx === -1 || descIdx === -1 || amountIdx === -1) return null;\n    const date = parseDate(row[dateIdx], \"boursorama\");\n    const description = row[descIdx] || \"\";\n    const amount = parseAmount(row[amountIdx]);\n    const category = row[categoryIdx] || categorizeTransaction(description, rulesText);\n    const account = accountIdx !== -1 ? row[accountIdx] || accountLabel : accountLabel;\n    const balance = balIdx !== -1 ? parseAmount(row[balIdx]) : undefined;\n    return {\n        date: date || \"\",\n        description,\n        amount,\n        currency: \"EUR\",\n        category,\n        account,\n        provider: \"boursorama\",\n        balance,\n        balanceCurrency: balance == null ? undefined : \"EUR\",\n        originalAmount: amount,\n        originalCurrency: \"EUR\"\n    };\n}\nfunction parseBNPRow(row, headers, accountLabel, rulesText) {\n    const dateIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"date\"));\n    const descIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"libelle\"));\n    const amountIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"montant\"));\n    const categoryIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"categorie\") && !h.toLowerCase().includes(\"sous\"));\n    if (dateIdx === -1 || descIdx === -1 || amountIdx === -1) return null;\n    const date = parseDate(row[dateIdx], \"bnp\");\n    const description = row[descIdx] || \"\";\n    const amount = parseAmount(row[amountIdx]);\n    const bnpCategory = row[categoryIdx] || \"\";\n    const category = bnpCategory || categorizeTransaction(description, rulesText);\n    return {\n        date: date || \"\",\n        description,\n        amount,\n        currency: \"EUR\",\n        category,\n        account: accountLabel,\n        provider: \"bnp\",\n        originalAmount: amount,\n        originalCurrency: \"EUR\"\n    };\n}\nfunction parseRevolutRow(row, headers, accountLabel, gbpToEurRate, rulesText) {\n    const startedIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"started\"));\n    const completedIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"completed\"));\n    const descIdx = headers.findIndex((h)=>h.toLowerCase().includes(\"description\"));\n    const amountIdx = headers.findIndex((h)=>h.toLowerCase() === \"amount\" || h.toLowerCase().includes(\"amount\"));\n    const currencyIdx = headers.findIndex((h)=>h.toLowerCase() === \"currency\" || h.toLowerCase().includes(\"currency\"));\n    const balIdx = headers.findIndex((h)=>h.toLowerCase() === \"balance\" || h.toLowerCase().includes(\"balance\"));\n    if (startedIdx === -1 && completedIdx === -1 || descIdx === -1 || amountIdx === -1) return null;\n    const dateRaw = startedIdx !== -1 ? row[startedIdx] : row[completedIdx];\n    const date = parseDate(dateRaw, \"revolut\");\n    const description = row[descIdx] || \"\";\n    const amountRaw = parseAmount(row[amountIdx]);\n    const currency = (currencyIdx !== -1 ? row[currencyIdx] : \"EUR\") || \"EUR\";\n    const amountEUR = currency.toUpperCase() === \"GBP\" ? amountRaw * gbpToEurRate : amountRaw;\n    const category = categorizeTransaction(description, rulesText);\n    const rawBalance = balIdx !== -1 ? parseAmount(row[balIdx]) : undefined;\n    return {\n        date: date || \"\",\n        description,\n        amount: amountEUR,\n        currency: \"EUR\",\n        category,\n        account: accountLabel,\n        provider: \"revolut\",\n        balance: rawBalance,\n        balanceCurrency: rawBalance == null ? undefined : currency || \"GBP\",\n        originalAmount: amountRaw,\n        originalCurrency: currency || \"GBP\"\n    };\n}\nasync function parseFiles(files, gbpToEurRate, rulesText) {\n    const all = [];\n    const entries = Object.entries(files);\n    for (const [bank, file] of entries){\n        if (!file) continue;\n        const text = await file.text();\n        const rows = parseCSV(text);\n        if (rows.length < 2) continue;\n        const { provider, headerRow } = detectProvider(rows);\n        const headers = rows[headerRow];\n        for(let i = headerRow + 1; i < rows.length; i++){\n            const row = rows[i];\n            if (row.length < 3) continue;\n            if (row.every((cell)=>!cell || cell.trim() === \"\")) continue;\n            let t = null;\n            if (provider === \"boursorama\") {\n                let defaultLabel = \"Boursorama\";\n                if (bank === \"boursoramaPersonal\") defaultLabel = \"BoursoBank\";\n                else if (bank === \"boursoramaJoint\") defaultLabel = \"BoursoBank (joint)\";\n                t = parseBoursoramaRow(row, headers, defaultLabel, rulesText);\n            } else if (provider === \"bnp\") t = parseBNPRow(row, headers, \"BNP\", rulesText);\n            else if (provider === \"revolut\") t = parseRevolutRow(row, headers, \"Revolut\", gbpToEurRate, rulesText);\n            if (t && t.date && t.amount !== 0) all.push(t);\n        }\n    }\n    all.sort((a, b)=>b.date.localeCompare(a.date));\n    return all;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/statements/parser.ts\n"));

/***/ })

});